<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACwAAABsAAAArAAAANwAA
        AD0AAAA/AAAAQAAAAD0AAAA3AAAAKwAAABsAAAAKAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADgAAACYAAAA4AAAAPwAA
        AEEAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABBAAAAPwAAADgAAAAmAAAADgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAACIAAAA7AAAAQQAA
        AEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEEAAAA7AAAAIwAA
        AAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAxAAAAQAAA
        AEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAPwAAAD8AAABAAAAAQAAA
        AEAAAABAAAAAMQAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAANwAA
        AEEAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAICCEoCAiVoAgIdXgEB
        AUIAAABAAAAAQAAAAEAAAABBAAAANwAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAA
        ADcAAABBAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEABAQJCAwNdngEB
        ee4CAnPZAwMxYgAAAD4AAABAAAAAQAAAAEAAAABBAAAANwAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>